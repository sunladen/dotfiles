set nocompatible

set encoding=utf-8
scriptencoding utf-8

set hidden
set noswapfile
set incsearch
set hls
set path=.,**
set nospell
set signcolumn=no
set tabstop=4 shiftwidth=4 autoindent smartindent
set noexpandtab
set notimeout
set ttimeout
"set ttimeoutlen=10
set ruler
set number
set noshowmode
set laststatus=2
set cursorline

let g:netrw_dirhistmax = 0

set wildcharm=<Tab>
set wildmenu
set wildmode=full
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd
set wildignore+=node_modules/*,.git/*

" <Tab> in normal mode shows wildmenu of buffers
nnoremap <Tab> :buffer<Space><Tab>

" Ctr-P open wildmenu for edit *
map <C-p> :e *<Tab>



" Enable system clipboard integration
set clipboard+=unnamedplus


nnoremap <SPACE> <Nop>
let mapleader=" "


" turn terminal to normal mode with escape
"tnoremap <Esc> <C-\><C-n>

nmap <leader>N :lprev<cr>
nmap <leader>n :lnext<cr>


" move among buffers
map <leader>h :bprev<CR>
map <leader>l :bnext<CR>
map <leader>0 :b0<CR>
map <leader>1 :b1<CR>
map <leader>2 :b2<CR>
map <leader>3 :b3<CR>
map <leader>4 :b4<CR>
map <leader>5 :b5<CR>
map <leader>6 :b6<CR>
map <leader>7 :b7<CR>
map <leader>8 :b8<CR>
map <leader>9 :b9<CR>

map [[ :silent! eval search('{', 'b')<CR>
map ]] :silent! eval search('{')<CR>


" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

autocmd VimEnter * normal! :startinsert :stopinsert


" Plugins
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif





call plug#begin('~/.vim/plugged')
	Plug 'scrooloose/syntastic'
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'
	Plug 'itchyny/lightline.vim'
	Plug 'pangloss/vim-javascript'
call plug#end()


autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif



"let g:syntastic_javascript_eslint_exe = '/usr/bin/ls' "[ -f $(npm bin)/eslint ] && $(npm bin)/eslint || eslint'
" Enable the eslint checker
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_javascript_eslint_generic = 1
let g:syntastic_javascript_eslint_exec = '/bin/ls'
let g:syntastic_javascript_eslint_exe='$(path=node_modules/.bin/eslint && while [ ! -f $path ]; do path=../$path; done; echo $(cd $(dirname $path); pwd)/$(basename $path))'
let g:syntastic_javascript_eslint_args='-f compact --fix'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" read changed javascript file after eslint applied fixes
set autoread
au BufReadPost *.js checktime
au VimEnter *.js au BufWritePost *.js checktime


set background=dark

"hi Normal ctermbg=NONE
"hi StatusLine ctermbg=1
"hi ColorColumn ctermbg=Black
hi LineNr ctermfg=grey
hi CursorLine cterm=bold
hi CursorLineNr cterm=bold ctermfg=white


let g:lightline = {
	\ 'colorscheme': '16color',
	\ 'separator': { 'left': "", 'right': "" },
 	\ 'subseparator': { 'left': "", 'right': "" },
	\ }

syntax enable


" fzf shortcuts
nnoremap <leader>ff <cmd>Files<cr>
nnoremap <leader>fg <cmd>Rg<cr>
nnoremap <leader>fb <cmd>Buffers<cr>


" location shortcuts
nnoremap <leader>j <cmd>lnext<cr>
nnoremap <leader>k <cmd>lprev<cr>

